{"mappings":"AACA,MAAMA,MACFC,YAAYC,EAAGC,GACXC,KAAKF,EAAIA,EACTE,KAAKC,SAAWF,GAAQ,GACxBC,KAAKE,YAAa,CACtB,CAIAC,KAAKC,EAAIC,GACL,IAAIC,EAAM,EAIV,OAHAF,EAAGG,SAAS,CAACC,EAAKC,KACdH,GAAOI,KAAKC,IAAIH,EAAMH,EAAGI,GAAQ,MAE9BC,KAAKE,KAAKN,EACrB,CAEAO,UAAUL,EAAKM,GACX,IAAIC,EAAM,EACV,IAAI,IAAIC,KAAOF,EACXC,EAAML,KAAKK,IAAIA,EAAKC,EAAIC,GAE5B,OAAOF,CACX,CAEAG,KAAKC,GACD,IAEIC,EAFAC,EAAY,CAAC,EACbN,EAAM,EAEV,IAAK,IAAIO,KAAKH,EACVE,EAAUF,EAAMG,KAAOD,EAAUF,EAAMG,KAAO,GAAK,EAC/CD,EAAUF,EAAMG,IAAMP,IACtBA,EAAMM,EAAUF,EAAMG,IACtBF,EAASD,EAAMG,IAGvB,OAAOF,CACX,CAEAG,WAAWD,GACP,GAAIE,MAAMC,QAAQH,GAEd,GAAIA,EAAEI,OAAS,EAEX,GAAmB,iBAARJ,EAAE,GAAM,CAEf,KAAItB,KAAKE,YAAa,GAWlB,OADAF,KAAKE,WAAaoB,EAAEI,QACb,EATP,GAAIJ,EAAEI,QAAU1B,KAAKE,WAEjB,OAAO,EAEPyB,QAAQC,IAAI,oHAAoHN,EAAEI,oCAAoC1B,KAAKE,4B,MAQnLyB,QAAQC,IAAI,4FAA4FN,EAAE,YAG9GK,QAAQC,IAAI,4FAGhBD,QAAQC,IAAI,mGAAmGN,MAInH,OAAO,CACX,CAOAO,MAAMC,EAAQC,GACV/B,KAAKuB,WAAWO,GAChB,IAAId,EAAM,CAAEM,EAAGQ,EAAQE,IAAKD,GAC5B/B,KAAKC,SAASgC,KAAKjB,EACvB,CAGAkB,SAASZ,GACLtB,KAAKuB,WAAWD,GAChB,IAAIa,EAAW,GACXC,EAAO,EAEX,IAAI,IAAIpB,KAAOhB,KAAKC,SAAU,CAC1B,IAAIoC,EAAI,CAAEpB,EAAGjB,KAAKG,KAAKmB,EAAGN,EAAIM,GAAIgB,KAAMtB,EAAIgB,KAC5C,GAAIG,EAAST,OAAS1B,KAAKF,EACvBqC,EAASF,KAAKI,GACdD,EAAOpC,KAAKa,UAAUuB,EAAMD,QAE5B,GAAIE,EAAEpB,EAAImB,EAAM,CACZ,IAAIG,GAAO,EACPC,EAAQ,EACZ,KAAOD,GACCE,OAAON,EAASK,GAAOvB,KAAOmB,GAC9BD,EAASO,OAAOF,EAAO,EAAGH,GAC1BD,EAAOpC,KAAKa,UAAUuB,EAAMD,GAC5BI,GAAO,GAEHC,EAAQL,EAAST,OAAS,EAC1Bc,IAEAD,GAAO,CAIvB,CAER,CACA,IAAII,EAAQ,GACZ,IAAI,IAAIC,KAAMT,EACVQ,EAAMV,KAAKW,EAAGN,MAElB,OAAOtC,KAAKkB,KAAKyB,EACrB,CAEAE,OACIC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUjD,KAAKC,UACzD,CAEAiD,QACIlD,KAAKC,SAAW,GAChBD,KAAKE,YAAa,EAClB4C,aAAaK,WAAW,WAC5B","sources":["src/knear.js"],"sourcesContent":[" \r\nclass kNear {\r\n    constructor(k, data) {\r\n        this.k = k\r\n        this.training = data || []\r\n        this.array_size = -1\r\n    }\r\n\r\n    //compute the euclidean distance between two vectors\r\n    //function assumes vectors are arrays of equal length\r\n    dist(v1, v2) {\r\n        let sum = 0\r\n        v1.forEach( (val, index) => {\r\n            sum += Math.pow(val - v2[index], 2)\r\n        })\r\n        return Math.sqrt(sum)\r\n    };\r\n\r\n    updateMax(val, arr) {\r\n        let max = 0\r\n        for(let obj of arr) {\r\n            max = Math.max(max, obj.d)\r\n        }\r\n        return max\r\n    }\r\n\r\n    mode(store) {\r\n        let frequency = {} // array of frequency.\r\n        let max = 0 // holds the max frequency.\r\n        let result // holds the max frequency element.\r\n        for (let v in store) {\r\n            frequency[store[v]] = (frequency[store[v]] || 0) + 1; // increment frequency.\r\n            if (frequency[store[v]] > max) { // is this frequency > max so far ?\r\n                max = frequency[store[v]] // update max.\r\n                result = store[v] // update result.\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n    checkInput(v) {\r\n        if (Array.isArray(v)) {\r\n            // array is correct\r\n            if (v.length > 0) {\r\n                // array contains values\r\n                if (typeof v[0] == 'number') {\r\n                    // first value is a number\r\n                    if (this.array_size > -1) {\r\n                        // training has data to comapre the size to\r\n                        if (v.length == this.array_size) {\r\n                            // size of the array is correct\r\n                            return true;\r\n                        } else {\r\n                            console.log(`ERROR: learn en classify verwachten een array met numbers van dezelfde lengte, je stuurt nu een array met lengte ${v.length}, terwijl je eerder lengte ${this.array_size} gebruikt hebt.`); \r\n                        }\r\n                    } else {\r\n                        // first value set training size\r\n                        this.array_size = v.length;\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    console.log(`ERROR: learn en classify verwachten een array met numbers, je stuurt nu array met ${typeof v[0]}.`);    \r\n                }\r\n            } else {\r\n                console.log(\"ERROR: learn en classify verwachten een array met numbers, je stuurt nu lege array.\");    \r\n            }\r\n        } else {\r\n            console.log(`ERROR: learn en classify verwachten een array met numbers, je stuurt nu geen array, maar ${typeof v}.`);\r\n        }\r\n\r\n        // something was wrong for this vector\r\n        return false\r\n    }\r\n\r\n    //\r\n    // PUBLIC : learn, classify\r\n    //\r\n\r\n    //add a point to the training set\r\n    learn(vector, label) {\r\n        this.checkInput(vector)\r\n        let obj = { v: vector, lab: label }\r\n        this.training.push(obj)\r\n    }\r\n\r\n    // classify a new unknown point\r\n    classify(v) {\r\n        this.checkInput(v)\r\n        let voteBloc = []\r\n        let maxD = 0\r\n\r\n        for(let obj of this.training) {\r\n            let o = { d: this.dist(v, obj.v), vote: obj.lab }\r\n            if (voteBloc.length < this.k) {\r\n                voteBloc.push(o);\r\n                maxD = this.updateMax(maxD, voteBloc)\r\n            } else {\r\n                if (o.d < maxD) {\r\n                    let bool = true\r\n                    let count = 0\r\n                    while (bool) {\r\n                        if (Number(voteBloc[count].d) === maxD) {\r\n                            voteBloc.splice(count, 1, o)\r\n                            maxD = this.updateMax(maxD, voteBloc)\r\n                            bool = false\r\n                        } else {\r\n                            if (count < voteBloc.length - 1) {\r\n                                count++\r\n                            } else {\r\n                                bool = false\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let votes = []\r\n        for(let el of voteBloc) {\r\n            votes.push(el.vote)\r\n        }\r\n        return this.mode(votes)\r\n    }\r\n\r\n    save() {\r\n        localStorage.setItem('training', JSON.stringify(this.training))\r\n    }\r\n    \r\n    clear() {\r\n        this.training = []\r\n        this.array_size = -1\r\n        localStorage.removeItem('training')\r\n    }\r\n}"],"names":["kNear","constructor","k","data","this","training","array_size","dist","v1","v2","sum","forEach","val","index","Math","pow","sqrt","updateMax","arr","max","obj","d","mode","store","result","frequency","v","checkInput","Array","isArray","length","console","log","learn","vector","label","lab","push","classify","voteBloc","maxD","o","vote","bool","count","Number","splice","votes","el","save","localStorage","setItem","JSON","stringify","clear","removeItem"],"version":3,"file":"index.32d82b5d.js.map"}